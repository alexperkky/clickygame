{"version":3,"sources":["components/NavMessage/index.js","components/Nav/index.js","components/Header/index.js","components/Container/index.js","components/ClickItem/index.js","components/Footer/index.js","components/Game/index.js","App.js","registerServiceWorker.js","index.js"],"names":["NavMessage","state","message","animating","renderMessage","_this","prevState","score","_ref","topScore","newState","this","props","setState","_this2","react_default","a","createElement","className","onAnimationEnd","Component","Nav","href","components_NavMessage","Header","Container","children","ClickItem","role","aria-label","onClick","handleClick","id","style","backgroundImage","concat","image","shake","Footer","alt","src","Game","data","handleCorrectGuess","newData","_this$state","newScore","newTopScore","Math","max","shuffleData","handleIncorrectGuess","resetData","map","item","Object","objectSpread","clicked","i","length","j","floor","random","temp","handleItemClick","guessedCorrectly","newItem","components_Nav","components_Header","components_Container","components_ClickItem","key","components_Footer","App","components_Game","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.efe92fe0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\n// NavMessage renders an li tag containing an message for the user\n\nclass NavMessage extends Component {\n  state = {\n    message: \"\",\n    animating: false\n  };\n\n  componentDidUpdate({ score, topScore }, prevState) {\n    const newState = { animating: true };\n\n    if (score === 0 && topScore === 0) {\n      newState.message = \"\";\n    } else if (score === 0 && topScore > 0) {\n      newState.message = \"incorrect\";\n    } else {\n      newState.message = \"correct\";\n    }\n\n    if (score !== this.props.score || this.state.message !== newState.message) {\n      this.setState(newState);\n    }\n  }\n\n  renderMessage = () => {\n    switch (this.state.message) {\n    case \"correct\":\n      return \"You guessed correctly!\";\n    case \"incorrect\":\n      return \"You guessed incorrectly!\";\n    default:\n      return \"Click an image to begin!\";\n    }\n  };\n\n  render() {\n    return (\n      <li\n        className={this.state.animating ? this.state.message : \"\"}\n        onAnimationEnd={() => this.setState({ animating: false })}\n      >\n        {this.renderMessage()}\n      </li>\n    );\n  }\n}\n\nexport default NavMessage;\n","import React from \"react\";\nimport NavMessage from \"../NavMessage\";\nimport \"./style.css\";\n\n// Component for the Navbar\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar\">\n      <ul>\n        <li className=\"brand\">\n          <a href=\"/\">Clicky Game</a>\n        </li>\n        <NavMessage score={props.score} topScore={props.topScore} />\n        <li>\n          Score: {props.score} | Top Score: {props.topScore}\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <h1>Clicky Game!</h1>\n      <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <main className=\"container\">{props.children}</main>;\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ClickItem(props) {\n  return (\n    <div\n      role=\"img\"\n      aria-label=\"click item\"\n      onClick={() => props.handleClick(props.id)}\n      style={{ backgroundImage: `url(\"${props.image}\")` }}\n      className={`click-item${props.shake ? \" shake\" : \"\"}`}\n    />\n  );\n}\n\nexport default ClickItem;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <div className=\"bottom\">\n        Clicky Game! <img alt=\"react\" src=\"assets/images/react.svg\" />\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Nav from \"../Nav\";\nimport Header from \"../Header\";\nimport Container from \"../Container\";\nimport ClickItem from \"../ClickItem\";\nimport Footer from \"../Footer\";\nimport data from \"../../data.json\";\n\nclass Game extends Component {\n  state = {\n    data,\n    score: 0,\n    topScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ data: this.shuffleData(this.state.data) });\n  }\n\n  handleCorrectGuess = newData => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      data: this.shuffleData(newData),\n      score: newScore,\n      topScore: newTopScore\n    });\n  };\n\n  handleIncorrectGuess = data => {\n    this.setState({\n      data: this.resetData(data),\n      score: 0\n    });\n  };\n\n  resetData = data => {\n    const resetData = data.map(item => ({ ...item, clicked: false }));\n    return this.shuffleData(resetData);\n  };\n\n  shuffleData = data => {\n    let i = data.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[j];\n      data[j] = temp;\n      i--;\n    }\n    return data;\n  };\n\n  handleItemClick = id => {\n    let guessedCorrectly = false;\n    const newData = this.state.data.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newItem;\n    });\n    guessedCorrectly\n      ? this.handleCorrectGuess(newData)\n      : this.handleIncorrectGuess(newData);\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav score={this.state.score} topScore={this.state.topScore} />\n        <Header />\n        <Container>\n          {this.state.data.map(item => (\n            <ClickItem\n              key={item.id}\n              id={item.id}\n              shake={!this.state.score && this.state.topScore}\n              handleClick={this.handleItemClick}\n              image={item.image}\n            />\n          ))}\n        </Container>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}